// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: followers.sql

package postgres

import (
	"context"
)

const followUser = `-- name: FollowUser :exec
INSERT INTO followers (
  follower_id, following_id
) VALUES (
  $1, $2
)
`

type FollowUserParams struct {
	FollowerID  int64 `json:"follower_id"`
	FollowingID int64 `json:"following_id"`
}

func (q *Queries) FollowUser(ctx context.Context, arg FollowUserParams) error {
	_, err := q.db.Exec(ctx, followUser, arg.FollowerID, arg.FollowingID)
	return err
}

const getFollowersEmails = `-- name: GetFollowersEmails :many
with followers_cte as (
    select follower_id from followers
    where following_id = $1
)
SELECT email from users
join followers_cte on users.id = followers_cte.follower_id
limit $2
offset $3
`

type GetFollowersEmailsParams struct {
	FollowingID int64 `json:"following_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

func (q *Queries) GetFollowersEmails(ctx context.Context, arg GetFollowersEmailsParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getFollowersEmails, arg.FollowingID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var email string
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowersIDs = `-- name: GetFollowersIDs :many
select follower_id from followers
where following_id = $1
`

func (q *Queries) GetFollowersIDs(ctx context.Context, followingID int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, getFollowersIDs, followingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var follower_id int64
		if err := rows.Scan(&follower_id); err != nil {
			return nil, err
		}
		items = append(items, follower_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowingEmails = `-- name: GetFollowingEmails :many
with following_cte as (
	select following_id from followers
	where follower_id = $1
)
SELECT email from users
join following_cte on users.id = following_cte.following_id
limit $2
offset $3
`

type GetFollowingEmailsParams struct {
	FollowerID int64 `json:"follower_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) GetFollowingEmails(ctx context.Context, arg GetFollowingEmailsParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getFollowingEmails, arg.FollowerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var email string
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowingIDs = `-- name: GetFollowingIDs :many
select following_id from followers
where follower_id = $1
`

func (q *Queries) GetFollowingIDs(ctx context.Context, followerID int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, getFollowingIDs, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var following_id int64
		if err := rows.Scan(&following_id); err != nil {
			return nil, err
		}
		items = append(items, following_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
