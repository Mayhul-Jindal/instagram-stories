// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package postgres

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, hashed_password
) VALUES (
  $1, $2
)
RETURNING id, email, hashed_password, created_at
`

type CreateUserParams struct {
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, hashed_password, created_at from users
where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select id, email, hashed_password, created_at from users
where id = $1
limit 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByIdAndEmail = `-- name: GetUserByIdAndEmail :one
select id, email, hashed_password, created_at from users
where id = $1 and email = $2
limit 1
`

type GetUserByIdAndEmailParams struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) GetUserByIdAndEmail(ctx context.Context, arg GetUserByIdAndEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByIdAndEmail, arg.ID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
	)
	return i, err
}

const getUsersEmails = `-- name: GetUsersEmails :many
select email from users
where id != $1
limit $2
offset $3
`

type GetUsersEmailsParams struct {
	ID     int64 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUsersEmails(ctx context.Context, arg GetUsersEmailsParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getUsersEmails, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var email string
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
